#!/bin/bash

# SOCKS5连接问题诊断和修复脚本
# 用于修复BBR+SOCKS5优化脚本导致的连接问题

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo "=================================================="
echo "🔧 SOCKS5连接问题诊断和修复脚本"
echo "=================================================="

# 检查root权限
if [[ $EUID -ne 0 ]]; then
    log_error "请使用root权限运行此脚本"
    exit 1
fi

# 第一步：检查基础网络连接
echo ""
echo "1️⃣ 基础网络连接检查"
echo "=========================================="

# 检查网络接口
INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1)
log_info "网络接口: $INTERFACE"

# 检查网络连通性
if ping -c 3 8.8.8.8 >/dev/null 2>&1; then
    log_info "✅ 外网连接正常"
else
    log_error "❌ 外网连接失败"
    echo "尝试修复网络配置..."
    # 重启网络服务
    systemctl restart NetworkManager 2>/dev/null || systemctl restart network 2>/dev/null || true
fi

# 第二步：检查TC带宽限制（最可能的问题）
echo ""
echo "2️⃣ 检查带宽限制设置"
echo "=========================================="

# 检查当前TC规则
log_info "当前TC规则:"
tc qdisc show dev $INTERFACE 2>/dev/null || log_warn "未发现TC规则"

# 清除可能有问题的TC规则
log_warn "清除TC带宽限制规则..."
tc qdisc del dev $INTERFACE root 2>/dev/null || true
tc qdisc del dev $INTERFACE ingress 2>/dev/null || true

# 重新设置默认队列
tc qdisc add dev $INTERFACE root pfifo_fast 2>/dev/null || true

log_info "✅ TC带宽限制已清除，网络应该恢复正常"

# 第三步：检查防火墙规则
echo ""
echo "3️⃣ 防火墙规则检查"
echo "=========================================="

log_info "当前防火墙规则:"
iptables -L INPUT -n --line-numbers | head -20

# 检查SSH端口（确保不会断连）
if ! iptables -L INPUT -n | grep -q "dpt:22"; then
    log_warn "添加SSH端口22规则..."
    iptables -I INPUT -p tcp --dport 22 -j ACCEPT
fi

# 检查SOCKS5端口
SOCKS_PORTS=$(netstat -tuln | grep LISTEN | grep -E ":(1080|8080|12800|8388)" | awk '{print $4}' | cut -d: -f2)
if [ -n "$SOCKS_PORTS" ]; then
    log_info "检测到SOCKS5监听端口: $SOCKS_PORTS"
    for port in $SOCKS_PORTS; do
        if ! iptables -L INPUT -n | grep -q "dpt:$port"; then
            log_info "添加端口$port的防火墙规则..."
            iptables -I INPUT -p tcp --dport $port -j ACCEPT
            iptables -I INPUT -p udp --dport $port -j ACCEPT
        fi
    done
else
    log_warn "未检测到SOCKS5监听端口"
fi

# 保存防火墙规则
iptables-save > /etc/sysconfig/iptables 2>/dev/null || iptables-save > /etc/iptables/rules.v4 2>/dev/null || true

# 第四步：检查代理服务状态
echo ""
echo "4️⃣ 代理服务状态检查"
echo "=========================================="

# 检查服务状态
for service in xray v2ray shadowsocks-libev; do
    if systemctl list-units --type=service | grep -q "$service"; then
        status=$(systemctl is-active $service 2>/dev/null || echo "inactive")
        if [ "$status" = "active" ]; then
            log_info "✅ $service 服务运行中"
            SERVICE_NAME=$service
        else
            log_warn "⚠️ $service 服务状态: $status"
            
            # 尝试启动服务
            log_info "尝试启动 $service..."
            systemctl start $service 2>/dev/null || true
            sleep 2
            
            if systemctl is-active --quiet $service; then
                log_info "✅ $service 启动成功"
                SERVICE_NAME=$service
            else
                log_warn "❌ $service 启动失败"
                # 查看服务日志
                echo "服务日志:"
                journalctl -u $service --no-pager -n 10 2>/dev/null || true
            fi
        fi
    fi
done

# 第五步：检查配置文件
echo ""
echo "5️⃣ 配置文件检查"
echo "=========================================="

# 查找配置文件
CONFIG_PATHS="/etc/xray/config.json /etc/v2ray/config.json /usr/local/etc/xray/config.json /etc/shadowsocks-libev/config.json"

for config_path in $CONFIG_PATHS; do
    if [ -f "$config_path" ]; then
        log_info "找到配置文件: $config_path"
        
        # 检查配置文件语法
        if command -v jq >/dev/null 2>&1; then
            if jq . "$config_path" >/dev/null 2>&1; then
                log_info "✅ 配置文件语法正确"
                
                # 提取端口信息
                ports=$(jq -r '.inbounds[]?.port // empty' "$config_path" 2>/dev/null)
                if [ -n "$ports" ]; then
                    log_info "配置文件中的端口: $ports"
                fi
            else
                log_error "❌ 配置文件语法错误"
                echo "尝试修复配置文件..."
                
                # 查找备份文件
                backup_file=$(ls -t ${config_path}.backup.* 2>/dev/null | head -1)
                if [ -f "$backup_file" ]; then
                    log_info "恢复备份配置: $backup_file"
                    cp "$backup_file" "$config_path"
                    
                    # 重启服务
                    if [ -n "$SERVICE_NAME" ]; then
                        systemctl restart "$SERVICE_NAME"
                        sleep 3
                    fi
                fi
            fi
        else
            log_warn "未安装jq，无法验证JSON语法"
        fi
    fi
done

# 第六步：端口监听检查
echo ""
echo "6️⃣ 端口监听状态检查"
echo "=========================================="

log_info "当前监听的端口:"
netstat -tuln | grep LISTEN | sort

# 检查常见SOCKS5端口
COMMON_PORTS="1080 8080 8388 12800 13333"
for port in $COMMON_PORTS; do
    if netstat -tuln | grep -q ":$port "; then
        log_info "✅ 端口 $port 正在监听"
        ACTIVE_PORT=$port
    fi
done

if [ -z "$ACTIVE_PORT" ]; then
    log_warn "⚠️ 未找到常见SOCKS5端口监听"
fi

# 第七步：生成测试命令
echo ""
echo "7️⃣ 连接测试"
echo "=========================================="

SERVER_IP=$(curl -s ifconfig.me --connect-timeout 10 2>/dev/null || ip route get 1 | awk '{print $3}' | head -1)

if [ -n "$ACTIVE_PORT" ]; then
    log_info "生成测试命令..."
    
    echo ""
    echo "📡 连接信息:"
    echo "服务器IP: $SERVER_IP"
    echo "端口: $ACTIVE_PORT"
    echo ""
    echo "🧪 测试命令 (在客户端执行):"
    echo "curl --socks5 vip1:123456@$SERVER_IP:$ACTIVE_PORT https://httpbin.org/ip"
    echo ""
    echo "或者使用以下无认证测试:"
    echo "curl --socks5 $SERVER_IP:$ACTIVE_PORT https://httpbin.org/ip"
    
    # 本地测试
    log_info "本地连接测试..."
    if command -v curl >/dev/null 2>&1; then
        if timeout 10 curl --socks5 127.0.0.1:$ACTIVE_PORT https://httpbin.org/ip 2>/dev/null; then
            log_info "✅ 本地SOCKS5连接测试成功"
        else
            log_warn "⚠️ 本地SOCKS5连接测试失败"
        fi
    fi
fi

# 第八步：问题排查建议
echo ""
echo "8️⃣ 问题排查建议"
echo "=========================================="

echo ""
echo "🔧 如果连接仍然失败，请尝试以下步骤:"
echo ""
echo "1. 重启网络服务:"
echo "   systemctl restart NetworkManager"
echo ""
echo "2. 完全清除TC规则:"
echo "   tc qdisc del dev $INTERFACE root"
echo "   tc qdisc add dev $INTERFACE root pfifo_fast"
echo ""
echo "3. 临时关闭防火墙测试:"
echo "   iptables -F"
echo "   iptables -P INPUT ACCEPT"
echo ""
echo "4. 重启代理服务:"
if [ -n "$SERVICE_NAME" ]; then
    echo "   systemctl restart $SERVICE_NAME"
else
    echo "   systemctl restart xray"
fi
echo ""
echo "5. 查看详细日志:"
if [ -n "$SERVICE_NAME" ]; then
    echo "   journalctl -u $SERVICE_NAME -f"
else
    echo "   journalctl -u xray -f"
fi
echo ""
echo "6. 检查系统负载:"
echo "   top"
echo "   free -h"
echo "   df -h"

# 创建快速修复脚本
cat > /root/quick_fix_network.sh << 'QUICKFIX'
#!/bin/bash
echo "🚀 快速网络修复"
INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1)

# 清除TC规则
tc qdisc del dev $INTERFACE root 2>/dev/null || true
tc qdisc add dev $INTERFACE root pfifo_fast

# 重启网络
systemctl restart NetworkManager 2>/dev/null || systemctl restart network 2>/dev/null || true

# 重启代理服务
systemctl restart xray 2>/dev/null || systemctl restart v2ray 2>/dev/null || true

echo "✅ 修复完成，请测试连接"
QUICKFIX

chmod +x /root/quick_fix_network.sh

echo ""
echo "=================================================="
echo "🛡️ 诊断完成！"
echo "=================================================="
echo ""
if [ -n "$ACTIVE_PORT" ]; then
    echo "✅ 发现活跃端口: $ACTIVE_PORT"
    echo "📡 服务器: $SERVER_IP:$ACTIVE_PORT"
else
    echo "⚠️ 未发现活跃的SOCKS5端口"
fi
echo ""
echo "🚀 快速修复命令: /root/quick_fix_network.sh"
echo ""
echo "如果问题仍然存在，请检查:"
echo "1. 客户端配置是否正确"
echo "2. 服务器防火墙是否开放对应端口"
echo "3. 云服务商安全组是否正确配置"
